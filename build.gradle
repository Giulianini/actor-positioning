plugins {
    id 'scala'
    id 'application'
    id 'pmd'
    id 'checkstyle'
    id 'project-report'
    id 'jacoco'
}

group 'pcd-1819'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

mainClassName = 'Main'

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    scalaCompilerPlugin
}

dependencies {
    //JAVA LIBS
    implementation 'log4j:log4j:1.2.17'
    //SCALA LIBS
    //JAVAFX
    implementation 'com.jfoenix:jfoenix:8.0.8' // Java 8
    implementation 'org.kordamp.ikonli:ikonli-core:1.7.0'
    implementation 'org.kordamp.ikonli:ikonli-javafx:1.7.0'
    implementation 'org.kordamp.ikonli:ikonli-material-pack:1.7.0'
    implementation 'eu.hansolo.enzo:Enzo:0.3.6'
    //SCALA LANG
    implementation 'org.scala-lang:scala-library:2.11.12'
    testImplementation 'org.scala-lang:scala-library:2.11.1'
    //TESTING
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.scalatest:scalatest_2.11:3.0.0'
    //AKKA
    compile group: 'com.typesafe.akka', name: 'akka-actor_2.12', version: '2.5.22'
}

jar {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes 'Main-Class': 'Main'
    }
}

checkstyle {
    toolVersion = '8.0'
    configFile = file('config/checkstyle/checkstyle.xml')
}

pmd {
    ignoreFailures = true
    ruleSetConfig = resources.text.fromFile("config/pmd/ruleset.xml")
}

sourceSets {
    main {
        scala {
            srcDirs = ['src/main/scala']
        }
        java {
            srcDirs = ['src/main/java']
        }
    }
    test {
        scala {
            srcDirs = ['test/main/scala']
        }
        java {
            srcDirs = ['test/main/java']
        }
    }
}

tasks.withType(ScalaCompile){
    // Map plugin jars to -Xplugin parameter
    List<String> parameters =
            configurations.scalaCompilerPlugin.files.collect {
                '-Xplugin:'+ it.absolutePath
            }

    // Add existing parameters
    List<String> existingParameters = scalaCompileOptions.additionalParameters
    if (existingParameters) {
        parameters.addAll(existingParameters)
    }

    // Add whatever flags you typically add
    parameters += [
            '-language:implicitConversions',
            '-language:higherKinds'
    ]

    // Finally set the additionalParameters
    scalaCompileOptions.additionalParameters = parameters
}

